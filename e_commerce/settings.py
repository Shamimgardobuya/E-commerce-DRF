"""
Django settings for e_commerce project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from dotenv import load_dotenv, find_dotenv
import dj_database_url


ENV_FILE = find_dotenv()
if ENV_FILE:
    load_dotenv(ENV_FILE)
SESSION_COOKIE_AGE = 3600  # 2 weeks in seconds
SESSION_COOKIE_SECURE = True   # Use secure cookies (HTTPS)
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

TEMPLATE_DIR = os.path.join(BASE_DIR, "e_commerce", "templates")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "").split()

AUTH0_CLIENT_ID=os.getenv("AUTH0_CLIENT_ID")
AUTH0_WEB_CLIENT_ID=os.getenv("AUTH0_WEB_CLIENT_ID")
AUTH0_AUDIENCE=os.getenv("AUTH0_AUDIENCE")
AUTH0_CLIENT_SECRET=os.getenv("AUTH0_SECRET")
AUTH0_DOMAIN=os.getenv("AUTH0_DOMAIN")
AUTH0_WEB_CLIENT_SECRET=os.getenv("AUTH0_WEB_CLIENT_SECRET")
AUTH0_CALLBACK_URL=os.getenv("AUTH0_CALLBACK_URL")
AUTH0_MGMT_API_TOKEN=os.getenv("AUTH0_MGMT_API_TOKEN")
AUTH0_ADMIN_ROLE=os.getenv("AUTH0_ADMIN_ROLE")
AUTH0_CUSTOMER_ROLE=os.getenv("AUTH0_CUSTOMER_ROLE")
API_URL=os.getenv("API_URL")
SMS_USERNAME=os.getenv("SMS_USERNAME")
SMS_API_KEY=os.getenv("SMS_API_KEY")
SMS_SHORT_CODE=os.getenv("SMS_SHORT_CODE")
AUTH0_MGMT_CLIENT_ID=os.getenv("AUTH0_MGMT_CLIENT_ID")
AUTH0_MGMT_CLIENT_SECRET=os.getenv("AUTH0_MGMT_CLIENT_SECRET")
EMAIL_HOST=os.getenv("EMAIL_HOST")
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS")
EMAIL_PORT = os.getenv("EMAIL_PORT")
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD=os.getenv("EMAIL_HOST_PASSWORD")
EMAIL_BACKEND=os.getenv("EMAIL_BACKEND")


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'registration',
    'categories',
    'products',
    'orders',
    'phonenumber_field',
    'rest_framework',
    'drf_yasg'
    
]

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'registration.utils.Auth0JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication'
    ),
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # For serving static files in production
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS' : {
        'Bearer' : {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    },
    'USE_SESSION_AUTH' : False,
    'PERSIST_AUTH': True
}
ROOT_URLCONF = 'e_commerce.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'e_commerce.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    
    'default': dj_database_url.config(
        default = os.getenv('DATABASE_URL'),
        conn_max_age = 600
    )
   
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Nairobi'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # always set this

if not DEBUG:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
